%% class to calculate Partial Autocorrelation Coefficient (PARCOR) Vocoder
classdef PartialAutocorrelationCoefficientVocoder < handle
    %% how to use : Usage
    %   1. generate PartialAutocorrelationCoefficient instance
    %       -> arguments : 
    %           ・ autocorrelation : signal autocorrelation array
    %           ・ order : analysis order (default : 30)
    %   2. if you'd like to check properties, conduct display_properties() method
    %% ---------- properties ---------- %%
    properties(Access = public)
        autocorrelation;    % required
        order;
        outputs;
        synthesized_signal;
        internal_status;
    end

    %% ---------- methods ---------- %%
    methods
        %% ---------- default constructor ---------- %%
        function object = PartialAutocorrelationCoefficientVocoder(autocorrelation, order)
            object.autocorrelation = autocorrelation;   % required
            if exist("order", "var")
                object.order = order;
            else
                object.order = 30;
            end
            object.synthesize_signal(1);
        end
        
        %% ---------- setters ---------- %%
        % autocorrelation setter
        function set.autocorrelation(object, autocorrelation)
            if length(autocorrelation) < 1
                throw(MException("Setter:autocorrelation", "autocorrelation length is smaller than 1."));
            end
            object.autocorrelation = autocorrelation;
        end

        % order setter
        function set.order(object, order)
            if order < 1
                throw(MException("Setter:order", "order is smaller than 1."));
            end
            object.order = order;
        end

        % outputs setter
        function set.outputs(object, outputs)
            if length(outputs) < 1
                throw(MException("Setter:outputs"));
            end
            object.outputs = outputs;
        end

        % synthesized_signal setter
        function set.synthesized_signal(object, synthesized_signal)
            if length(synthesized_signal) < 1
                throw(MException("Setter:synthesized_signal", "synthesized_signal size is smaller than 1."));
            end
            object.synthesized_signal = synthesized_signal;
        end

        % internal_status setter
        function set.internal_status(object, internal_status)
            if length(internal_status) < 1
                throw(MException("Setter:internal_status", "internal_status size is smaller than 1."));
            end
            object.internal_status = internal_status;
        end

        %% ---------- getters ---------- %%
        % autocorrelation getter
        function autocorrelation = get.autocorrelation(object)
            autocorrelation = object.autocorrelation;
        end

        % order getter
        function order = get.order(object)
            order = object.order;
        end

        % outputs getter
        function outputs = get.outputs(object)
            outputs = object.outputs;
        end

        % synthesized_signal getter
        function synthesized_signal = get.synthesized_signal(object)
            synthesized_signal = object.synthesized_signal;
        end

        % internal_status getter
        function internal_status = get.internal_status(object)
            internal_status = object.internal_status;
        end

        %% ---------- usual method ---------- %%
        % method to convolute partial autocorrelation coefficient and residual error
        function [output_element, internal_status_element] = convolute(object, partial_autocorrelation_coefficient_element, output_element, internal_status_element)
            output_element = output_element + (partial_autocorrelation_coefficient_element * internal_status_element);
            internal_status_element = internal_status_element - (partial_autocorrelation_coefficient_element * output_element);
        end

        % method to synthesize signal
        function synthesize_signal(object, residual_error)
            object.outputs = zeros(1, object.order);
            object.internal_status = zeros(1, object.order);
            object.outputs(1) = residual_error(1);
            partial_autocorrelation_coefficient = PartialAutocorrelationCoefficient(object.autocorrelation, object.order);
            for order_index = object.order : -1 : 1
                k = partial_autocorrelation_coefficient.partial_autocorelation_coefficient(order_index);
                out = object.outputs(order_index);
                status = object.internal_status(order_index);
                outobject.convolute(k, out, status);
                object.internal_status(order_index + 1) = status;
                object.outputs(order_index) = out;
            end
        end

        % method to display properties
        function display_properties(object)
            fprintf("----------------------------------------------\n");
            fprintf("- Partial AutoCorrelation Coefficient Vocoder \n");
            fprintf("autocorrelation size : (%d, %d)\n", size(object.autocorrelation));
            fprintf("order : %d\n", object.order);
            fprintf("synthesize_signal size : (%d, %d)\n", size(object.synthesized_signal));
            fprintf("internal_status size : (%d, %d)\n", size(object.internal_status));
            fprintf("outputs size : (%d, %d)\n", size(object.outputs));
            fprintf("----------------------------------------------\n\n");
        end
    end
end