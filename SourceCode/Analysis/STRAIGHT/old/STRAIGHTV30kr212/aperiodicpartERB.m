function [apv,dpv,apve,dpve]=aperiodicpartERB(x,fs,f0,shiftm,intshiftm,mm);%	Relative aperiodic energy estimation with ERB smoothing%		[apv,dpv]=aperiodicpartERB(x,fs,f0,shiftm,intshiftm,mm)%		x	: input speech%		fs	: sampling frequency (Hz)%		f0	: fundamental frequency (Hz)%		shiftm	: frame shift (ms) for input F0 data%		intshiftm 	: frame shift (ms) for internal processing%		mm	: length of frequency axis (usually 2^N-1)%%	19/August/1999%	21/August/1999%	30/May/2001%	30/April/2005 modification for Matlab v7.0 compatibilityfftl=2.0.^ceil(log2(6.7*fs/40)+1);  % FFT size selection to be scalablefr40=round(40/fs*fftl)/fftl*fs;  % nearesr frequency for 40 Hzidxv=ones(size(f0));f0(isnan(f0))=idxv(isnan(f0))*0;fframe=1000/shiftm; % frame update frequency (Hz)nn=length(f0);deltat0=diff(f0(:));deltat0(f0(1:nn-1)==0)=deltat0(f0(1:nn-1)==0)*0;deltat0(f0(2:nn)==0)=deltat0(f0(2:nn)==0)*0;deltat0=([deltat0;deltat0(nn-1)]+[deltat0(1);deltat0])/2*fframe;tx=(0:length(x)-1)/fs;%----- window design for 40 Hz ------tt=((1:fftl)-fftl/2)/fs;w=exp(-pi*(tt*fr40/1).^2);  % fr40/0.2 to fr40/2 worked reasonably. But, WATCH fftl !!wb=max(0,1-abs(tt*fr40/2));wb=wb(wb>0);wcc=fftfilt(wb,[w,zeros(1,fftl)]);wcc=wcc/max(wcc);wcc=wcc(wcc>0.00002)-0.00002;wcc=wcc/sum(wcc);%------ selector design ----%[mm,ll]=size(env);ll=length(f0);fxa=(0:mm-1)/(mm-1)*fs/2;fxfi=(0:fftl/2)'/fftl*fs;lf40=(0.5+0.5*cos(2*pi*fxfi/fr40)).^6;df40=(0.5-0.5*cos(2*pi*fxfi/fr40)).^6;%------ preparation for EREB smoothingevv=(0:1024)/1024*HzToERBrate(fs/2); % ERB axis for smoothingeew=1; % effective smoothing width in ERBlh=round(2*eew/evv(2)); % number of samples for 2*eew on evv axiswe=hanning(lh)/sum(hanning(lh)); % Hanning window is used for smoothingbx=(1:length(evv)); % index for extractionhvv=228.8*(10.0.^(0.0467*evv)-1); % frequency axis represented in Hzhvv(1)=0; hvv(end)=fs/2; % safeguardevx=(0:0.5:max(evv));%------ analysis for each framexc=[randn(fftl*2,1)*0.0001;interp(x(:),2);randn(fftl*2,1)*0.0001];txc=(0:length(xc)-1)/fs/2-(fftl*2+1)/fs/2;rt=((1:length(wcc))-length(wcc)/2)/fs;rt2=rt.^2;apv=zeros(mm,nn);dpv=apv;apve=zeros(length(evx),nn);dpve=apve;bc=1:fftl/2+1;f0(f0==0)=f0(f0==0)*0+160;deltat0(abs(deltat0)>2000)=deltat0(abs(deltat0)>2000)*0;tbs=((1:fftl)-fftl/2)/fs;llf=1.0./(1+exp(400*(abs(tbs)-0.035)));mllf=fftshift(llf);llf2=1.0./(1+exp(400*(abs(tbs)-0.05))); % This is only for test.mllf2=fftshift(llf2); % This is only for test.bss=(1:fftl/2-1);bss2=1:fftl/2;%keyboarddisp([' o represents ' num2str(10*intshiftm) '(ms)'])iix=1;for jj=1:intshiftm:round(length(x)/fs*1000)   %for ii=1:nn  ii = max(1,min(nn,round(jj/shiftm)));  if ii>nn	  break  end;  itxc=fr40/f0(ii)*rt-0.5*deltat0(ii)/f0(ii)*rt2*(fr40/f0(ii))^2+ii*shiftm/1000;  xs=interp1(txc,xc,itxc,'*linear');  a=fft((xs-mean(xs)).*wcc,fftl);  sms=real(fft(real(ifft(20*log10(abs(a)+0.00000001))).*mllf));  plits=[0 (((diff(sms(bss2)).*diff(sms(bss2+1)))<0).*sms(bss).*(diff(sms(bss2))>0))];  dlits=[0 (((diff(sms(bss2)).*diff(sms(bss2+1)))<0).*sms(bss).*(diff(sms(bss2))<0))];  gg=fxfi(abs(plits)>0);  gfg=(sms(abs(plits)>0));  afa=abs(a(abs(plits)>0));  if length(gfg)>0	  gfg1=gfg(1);  else	  gfg1=sms(1);  end;%  apv(:,iix)=interp1q([0;gg;fs/2]*f0(ii)/fr40,[gfg1,gfg,sms(fftl/2+1)]',fxa');	  dd=fxfi(abs(dlits)>0);  dfd=(sms(abs(dlits)>0));  if length(dfd)>0	  dfd1=dfd(1);  else	  dfd1=sms(1);  end;%  dpv(:,iix)=interp1q([0;dd;fs/2]*f0(ii)/fr40,[dfd1,dfd,sms(fftl/2+1)]',fxa');  dda=[0;dd;fs/2]*f0(ii)/fr40; % anchor point for dip (Hz)gga=[0;gg;fs/2]*f0(ii)/fr40; % anchor point for peak (Hz)dfda=[dfd(1) dfd dfd(end)]; % dip level (dB)gfga=[gfg(1) gfg gfg(end)]; % peak level (dB)dfdap=10.0.^(dfda/10); % dip level (power)gfgap=10.0.^(gfga/10); % peak level (power)%keyboard;ape=interp1(HzToERBrate(gga),gfgap,evv); % Upper power envelope on ERBdpe=interp1(HzToERBrate(dda),dfdap,evv); % Upper power envelope on ERBapef=[ape(lh:-1:2) ape ape(end-1:-1:end-lh)]; % ape with mirrored endsdpef=[dpe(lh:-1:2) dpe dpe(end-1:-1:end-lh)]; % dpe with mirrored endsapefs=fftfilt(we,apef); % smoothed apedpefs=fftfilt(we,dpef); % smoothed dpeapefs=apefs(bx+lh-1+round(lh/2)); dpefs=dpefs(bx+lh-1+round(lh/2));apr=interp1(hvv,apefs,fxa); % smoothed ape on linear axisdpr=interp1(hvv,dpefs,fxa); % smoothed dpe on linear axisdpv(:,iix)=dpr';apv(:,iix)=apr';dpve(:,iix)=interp1(evv,dpefs,evx)';apve(:,iix)=interp1(evv,apefs,evx)';  iix=iix+1;  if iix>nn     break  end;%  fprintf(num2str(iix))%  if rem(iix,10)==0;fprintf('\n');end;  if rem(iix,10)==0    fprintf('o')    if rem(iix,200)==0%		keyboard       fprintf('\n')    end;  end;  if iix==-100;keyboard;end;end;fprintf('\n')apv=apv(:,1:iix-1);dpv=dpv(:,1:iix-1);apve=apve(:,1:iix-1);dpve=dpve(:,1:iix-1);