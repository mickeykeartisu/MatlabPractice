function [f0r,ecr,gdv]=refineF07(x,fs,dn,f0raw,n3sgram,fftl,eta,nhmx,shiftm,nl,nu)%	F0 estimation refinement%	[f0r,ecr]=refineF06(x,fs,dn,f0raw,n3sgram,fftl,nhmx,shiftm,nl,nu)%		x		: input waveform%		fs		: sampling frequency (Hz)%		dn		: down sampling rate%		f0raw	: F0 candidate (Hz)%		n3sgram	: STRAIGHT spectrogram%		fftl	: FFT length%		eta		: temporal stretch factor%		nhmx	: highest harmonic number%		shiftm	: frame shift period (ms)%		nl		: lower frame number%		nu		: uppter frame number%%	Example of usage (with STRAIGHT)%%	global xold fs f0shiftm f0raw%%	dn=floor(fs/(800*3*2));%	[f0raw,ecr]=refineF07(xold,fs,dn,f0raw,n3sgram,512,1.1,3,f0shiftm,1,length(f0raw));%	Designed and coded by Hideki Kawahara%	28/July/1999%	29/July/1999 test version using power weighting%	30/July/1999 GcBs is added (bug fix)%	07/August/1999 small bug fix%	06/April/2002 modification for ICSLP'2002% 	modification for compatibility, 06/April/2002fso=fs; fs=fs/dn;x=decimate(x,dn);[ml,mc]=size(n3sgram);ffts=(ml-1)*2;ddsp=fso/ffts;ddif=fs/fftl;%	end of modificationf0i=f0raw;f0i(f0i==0)=f0i(f0i==0)+160;fx=(0:fftl-1)/fftl;fax=(0:fftl-1)/fftl*fs;xlinms=length(x)/fs*1000;%nfr=min(length(f0i),round(xlinms/shiftm));nfr=length(f0i); % 07/August/1999 shiftl=shiftm/1000*fs;fmx=zeros(nfr,nhmx);vx=zeros(nfr,nhmx);fvi=zeros(nu-nl+1,fftl/2+1);vfs=zeros(nfr,nhmx);avi=fvi*0;lenx=length(x);x=[zeros(fftl,1); x(:) ; zeros(fftl,1)]';tt=((1:fftl)-fftl/2)/fs;th=(0:fftl-1)/fftl*2*pi;rr=exp(-i*th);f0t=100;w1=max(0,1-abs(tt'*f0t/eta));w1=w1(w1>0);wg=exp(-pi*(tt*f0t/eta).^2);wgg=(wg(abs(wg)>0.0002));wo=fftfilt(wgg,[w1; zeros(length(wgg),1)])';xo=(0:length(wo)-1)/(length(wo)-1);nlo=length(wo)-1;xi=0:1/nlo*200/100:1;wa=interp1(xo,wo,xi,'*linear');if nl*nu <0	nl=1;	nu=nfr;end;bx=1:fftl/2+1;pif=zeros(fftl/2+1,nfr);dpif=zeros(fftl/2+1,nfr);pwm=zeros(fftl/2+1,nfr);gdfv=zeros(ml,mc);for kk=nl:nu		if f0i(kk) < 40		f0i(kk)=40;	end;	nf0=fftl/(fs/f0i(kk));	f0t=f0i(kk);	xi=0:1/nlo*f0t/100:1;	wa=interp1(xo,wo,xi,'*linear');	wal=length(wa);	bb=1:wal;	bias=round(fftl-wal/2+(kk-1)*shiftl);	dcl=mean(x(bb+bias));	ff0=fft((x(bb+bias-1)-dcl).*wa,fftl);	ff1=fft((x(bb+bias)-dcl).*wa,fftl);	ff2=fft((x(bb+bias+1)-dcl).*wa,fftl);	fd=ff2.*rr-ff1;	fd0=ff1.*rr-ff0;	crf=fax+(real(ff1).*imag(fd)-imag(ff1).*real(fd))./(abs(ff1).^2)*fs/pi/2;	crf0=fax+(real(ff0).*imag(fd0)-imag(ff0).*real(fd0))./(abs(ff0).^2)*fs/pi/2;	pif(:,kk)=crf(bx)'*2*pi;	dpif(:,kk)=(crf(bx)-crf0(bx))'*2*pi;	pwm(:,kk)=abs(ff1(bx)'); % 29/July/1999	gdf=zspec2gdf3(n3sgram(:,kk),f0t,fso);	gdfv(:,kk)=gdf(1:ml);%	keyboard;end;slp=([pif(2:fftl/2+1,:);pif(fftl/2+1,:)]-pif)/(fs/fftl*2*pi);dslp=([dpif(2:fftl/2+1,:);dpif(fftl/2+1,:)]-dpif)/(fs/fftl*2*pi)*fs;mmp=slp*0;%[c1,c2]=znrmlcf2(1);[c1,c2]=znrmlcf2(shiftm);fxx=((0:fftl/2)+0.5)/fftl*fs*2*pi;%--- calculation of relative noise levelfor ii=1:fftl/2+1;	c2=c2*(fxx(ii)/2/pi)^2;	mmp(ii,:)=(dslp(ii,:)/sqrt(c2)).^2+(slp(ii,:)/sqrt(c1)).^2;end;%--- Temporal smoothing%sml=round(6*fs/1000/2)*2+1; % 12 ms, and odd number%sml=round(4*fs/1000/2)*2+1; % 8 ms, and odd numbersml=round(1.5*fs/1000/2/shiftm)*2+1; % 3 ms, and odd numbersmb=round((sml-1)/2); % bias due to filtering%This smoothing is modified (30 Nov. 2000).smmp=fftfilt((hanning(sml).^2)/sum((hanning(sml).^2)),[mmp zeros(fftl/2+1,sml*2)]'+0.00001)';smmp=1.0./fftfilt(hanning(sml)/sum(hanning(sml)),1.0./smmp')';smmp=smmp(:,(1:nfr)+sml-2);%--- Power adaptive weighting (29/July/1999)spwm=fftfilt(hanning(sml)/sum(hanning(sml)),[pwm zeros(fftl/2+1,sml*2)]'+0.00001)';spfm=fftfilt(hanning(sml)/sum(hanning(sml)),[pwm.*pif zeros(fftl/2+1,sml*2)]'+0.00001)';spif=spfm./spwm;spif=spif(:,(1:nfr)+smb);%keyboard;idx=max(0,f0i/fs*fftl);idxo=max(0,f0i/fso*ffts);%iidx=idx+(0:nfr-1)*(fftl/2+1)+1;%vv=smmp(floor(iidx))+(iidx-floor(iidx)).*(smmp(floor(iidx)+1)-smmp(floor(iidx)));%iidx2=iidx+idx;%iidx3=iidx+2*idx;%vv2=smmp(floor(iidx2))+(iidx2-floor(iidx2)).*(smmp(floor(iidx2)+1)-smmp(floor(iidx2)));%vv3=smmp(floor(iidx3))+(iidx3-floor(iidx3)).*(smmp(floor(iidx3)+1)-smmp(floor(iidx3)));%fq1=(pif(floor(iidx))+(iidx-floor(iidx)).*(pif(floor(iidx)+1)-pif(floor(iidx))))/2/pi;%fq2=(pif(floor(iidx2))+(iidx2-floor(iidx2)).*(pif(floor(iidx2)+1)-pif(floor(iidx2))))/2/pi;%fq3=(pif(floor(iidx3))+(iidx3-floor(iidx3)).*(pif(floor(iidx3)+1)-pif(floor(iidx3))))/2/pi;%ffq=(fq1./sqrt(vv)+fq2./sqrt(vv2/4)/2+fq3./sqrt(vv3/9)/3)./(1.0./sqrt(vv)+1.0./sqrt(vv2/4)+1.0./sqrt(vv3/9));%vvt=1.0./(1.0./vv+1.0./vv2*4+1.0./vv3*9);fqv=zeros(nhmx,nfr);vvv=zeros(nhmx,nfr);ggg=zeros(nhmx,nfr);iidx=(0:nfr-1)*(fftl/2+1)+1;iidxo=(0:nfr-1)*(ffts/2+1)+1;for ii=1:nhmx	iidx=idx+iidx;	iidxo=idxo+iidxo;	vvv(ii,:)=(smmp(floor(iidx))+(iidx-floor(iidx)).*(smmp(floor(iidx)+1)-smmp(floor(iidx))))/(ii*ii);%	fqv(ii,:)=(pif(floor(iidx))+(iidx-floor(iidx)).*(pif(floor(iidx)+1)-pif(floor(iidx))))/2/pi/ii;	fqv(ii,:)=(spif(floor(iidx))+(iidx-floor(iidx)).*(spif(floor(iidx)+1)-spif(floor(iidx))))/2/pi/ii; % 29/July/199	ggg(ii,:)=(gdfv(floor(iidxo))+(iidxo-floor(iidxo)).*(gdfv(floor(iidxo)+1)-gdfv(floor(iidxo))))/ii; % 06/April/2002end;vvvf=1.0./sum(1.0./vvv);f0r=sum(fqv./sqrt(vvv))./sum(1.0./sqrt(vvv)).*(f0raw>0);ecr=sqrt(1.0./vvvf).*(f0raw>0)+(f0raw<=0);keyboard;wm=diag(1.0./[1:nhmx])*sqrt(1.0./vvv);gdv=sum(ggg.*wm)./sum(wm);%--------------------function [c1,c2]=znrmlcf2(f)n=100;x=0:1/n:3;g=GcBs(x,0);dg=[diff(g) 0]*n;dgs=dg/2/pi/f;xx=2*pi*f*x;c1=sum((xx.*dgs).^2)/n;c2=sum((xx.^2.*dgs).^2)/n;%---------------------function p=GcBs(x,k)tt=x+0.0000001;p=tt.^k.*exp(-pi*tt.^2).*(sin(pi*tt+0.0001)./(pi*tt+0.0001)).^2;%--------------------function gdf=zspec2gdf3(spec,f0,fs)%	test function to convert absolute spectrum to group delay%	[gdf]=zspec2gdf3(spec,f0,fs)%	spec	: STRAIGHT spectral slice from 0 to fs/2%	f0		: fundamental frequency (Hz)%	fs		: samping frequency (Hz)%	gdf		: group delay function (ms)fftl=(length(spec)-1)*2;rbb2=(length(spec)-1):-1:2;lft=1-hanning(fftl);lft=1.0./(1+exp(-(lft-0.5)*60));ff=[spec;spec(rbb2)];ccp=real(fft(log(ff+1/1000000)));ccp2=[ccp(1);2*ccp(2:fftl/2);0*ccp(fftl/2+1:fftl)];ffx=(fft(ccp2.*lft)/fftl);tx=real(ifft(exp(ffx)));%gdf=diff(unwrap(angle(fft(tx))))/(2*pi*fs/fftl)*1000;%gdf=[gdf(1);gdf];gdf=(imag(ifft(ccp2.*lft)))/(2*pi*fs/fftl);gdf=[diff(gdf);gdf(1)-gdf(fftl)];gdf=(gdf+[gdf(fftl);gdf(1:fftl-1)])/2;%--------------------function tx=zspec2invf(spec,f0,fs)%	test function to convert absolute spectrum to group delay%	[gdf]=zspec2gdf3(spec,f0,fs)%	spec	: STRAIGHT spectral slice from 0 to fs/2%	f0		: fundamental frequency (Hz)%	fs		: samping frequency (Hz)%	gdf		: group delay function (ms)fftl=(length(spec)-1)*2;rbb2=(length(spec)-1):-1:2;lft=1-hanning(fftl);lft=1.0./(1+exp(-(lft-0.5)*60));ff=[spec;spec(rbb2)];ccp=real(fft(log(ff+1/1000000)));ccp2=[ccp(1);2*ccp(2:fftl/2);0*ccp(fftl/2+1:fftl)];ffx=(fft(ccp2.*lft)/fftl);tx=real(ifft(exp(ffx)));%gdf=diff(unwrap(angle(fft(tx))))/(2*pi*fs/fftl)*1000;%gdf=[gdf(1);gdf];gdf=(imag(ifft(ccp2.*lft)))/(2*pi*fs/fftl);gdf=[diff(gdf);gdf(1)-gdf(fftl)];gdf=(gdf+[gdf(fftl);gdf(1:fftl-1)])/2;